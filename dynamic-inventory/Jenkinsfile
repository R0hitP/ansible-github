pipeline {
    options {
        timestamps()
        skipDefaultCheckout()
    }
    agent { label 'ansible' }
    parameters {
        choice(name: 'Action', choices: 'plan\napply', description: 'Manual build stages')
        string(name: 'hosts', defaultValue: 'hosts/aws_ec2.yml', description: 'Here we are providing host value')
        string(name: 'source_host', defaultValue: 'source_host=servers', description: 'Here we are providing source_host value')
        //AWS
        // string(name: 'aws_access_key_id', defaultValue: '', description: 'aws access key id')
        // string(name: 'aws_secret_key_id', defaultValue: '', description: 'aws secret key id')
        // string(name: 'aws_session_token', defaultValue: '', description: 'aws session token')
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        // stage('Set up aws credentials') {
        //     steps {
        //         sh "export AWS_ACCESS_KEY_ID=$aws_access_key_id"
        //         sh "export AWS_SECRET_ACCESS_KEY=$aws_secret_key_id"
        //         sh "export AWS_SESSION_TOKEN=$aws_session_token"
        //     }
        // }
        stage('Set up ansible') {
            steps {
                //need to install module panda to use python script
                //sudo apt install python3-pip & pip3 install pandas
                sh "cd scripts; python3 ansible_package.py"
                sh "cd scripts; mv ansible-vars.yml dynamic-inventory/roles/package/vars/"
                sh "ls"
            }
        }
        stage('Establish ssh connection') {
            steps {
                sh "aws ec2-instance-connect send-ssh-public-key --instance-id i-0f3a063e6952700ad --instance-os-user ssm-user --ssh-public-key file://~/.ssh/id_rsa.pub --profile trainee"
            }
        }
        stage('Run ansible playbook') {
            when {
                expression {
                    params.Action == 'apply'
                }
            }
            steps {
                ansiColor('xterm') {
                    sh 'cd dynamic-inventory; ansible-playbook -i $hosts -e $source_host --user ssm-user role.yml'
                }
            }
        }
    }
    post {
        always {
            echo "Clean up the workspace in deploy node!"
            cleanWs()
        }
    }
}
