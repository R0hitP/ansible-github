---
#ansible to grab inspector finding report then use csv to create host file

#filter columns to resource id, serverity, fixed and current version, public and private ips
#eic endpoint to send out ssh keys for ansible fallback is sending and copying public ssh key to target nodes
- name: Upgrade list of packages on Amazon Linux servers
  become: yes
  yum:
    name: "{{ item }}"
    state: installed
  loop: "{{ aws_vulnerable_packages2 }}"
  ignore_errors: yes
  when: ansible_distribution == 'Amazon'

# - name: Remove lock from specific packages
#   become: yes
#   community.general.yum_versionlock:
#     state: absent
#     name: "{{ item }}"
#   loop:
#     - kernel-devel
#     - kernel-headers
#     - kernel
#     - runc
#     - containerd
#   when: ansible_distribution == 'Amazon'

# - name: Enable kernel version 5.15
#   become: yes
#   shell: amazon-linux-extras enable kernel-5.15

# - name: Upgrade list of packages on Amazon Linux servers
#   become: yes
#   yum:
#     name: "{{ item }}"
#     state: latest
#   loop: "{{ aws_vulnerable_packages }}"
#   ignore_errors: yes
#   when: ansible_distribution == 'Amazon'

#use the list no loop 
# - name: Upgrade list of packages on Amazon Linux servers
#   become: yes
#   yum:
#     name: "{{ vulnerable_packages | join(',') }}"
#     state: latest
#   ignore_errors: yes
#   when: ansible_distribution == 'Amazon'

- name: Update cache 
  become: yes
  apt:
    update_cache: yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

# - name: Upgrade list of packages on Ubuntu servers
#   become: yes
#   apt:
#     name: "*"
#     state: latest
#   when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

# - name: Upgrade list of packages on Ubuntu servers
#   become: yes
#   apt:
#     name: "{{ item }}"
#     state: latest
#   loop: "{{ ubuntu_vulnerable_packages }}"
#   ignore_errors: yes
#   when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' 

- name: Upgrade list of packages on Ubuntu servers
  become: yes
  apt:
    name: "{{ item }}"
    state: latest
  loop: "{{ ec2_instance_connect_packages }}"
  ignore_errors: yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

